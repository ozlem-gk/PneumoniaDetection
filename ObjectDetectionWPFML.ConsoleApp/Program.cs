// This file was auto-generated by ML.NET Model Builder. 

using ObjectDetectionWPFML.Model;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace ObjectDetectionWPFML.ConsoleApp {
    class Program {
        private const string test = @"D:\Projects_VS\ML.NET project\Pneumonia detection\chest_xray\train\NORMAL\IM-0115-0001.jpeg";

        static void Main(string[] args) {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = new ModelInput() {
                ImageSource = test
            };

            var result = GetHash(new Bitmap(test));
            var result1 = GetHash(new Bitmap(@"D:\Photos\SS\Screenshot_2020-06-18-09-19-36-321_com.snapchat.android.jpg"));

            int equalElements = result.Zip(result1, (i, j) => i == j).Count(eq => eq);
            //ModelBuilder.CreateModel();
            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Label with predicted Label from sample data...\n\n");
            Console.WriteLine($"ImageSource: {sampleData.ImageSource}");
            Console.WriteLine($"\n\nPredicted Label value {predictionResult.Prediction} \nPredicted Label scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        private static Boolean isGrayScale(Bitmap img) {
            Boolean result = true;
            for (Int32 h = 0; h < img.Height; h++)
                for (Int32 w = 0; w < img.Width; w++) {
                    Color color = img.GetPixel(w, h);
                    if ((color.R != color.G || color.G != color.B || color.R != color.B) && color.A != 0) {
                        result = false;
                        return result;
                    }
                }
            return result;
        }

        static List<bool> GetHash(Bitmap bmpSource) {
            var result = isGrayScale(bmpSource);
            List<bool> lResult = new List<bool>();
            //create new image with 16x16 pixel
            Bitmap bmpMin = new Bitmap(bmpSource, new Size(16, 16));
            for (int j = 0; j < bmpMin.Height; j++) {
                for (int i = 0; i < bmpMin.Width; i++) {
                    //reduce colors to true / false                
                    lResult.Add(bmpMin.GetPixel(i, j).GetBrightness() < 0.5);
                }
            }
            return lResult;
        }

    }
}
